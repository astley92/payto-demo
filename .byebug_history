exit
outcome.errors
params
c
params["item_id"]
params
exit
type
exit
page.text
c
exit
SettlementAccount.take
SettlementAccount.update(params[:id], **settlement_account_params)
exit
SettlementAccount.update!(params[:id], **settlement_account_params)
exit
payment.purchase
payment
c
Command::Purchase::CreateAgreement.jobs
Command::Purchase::CreateAgreement.drain
Command::Purchase::CreateAgreement.jobs.drain
Command::Purchase::CreateAgreement.jobs
exit
Command::Purchase::CreateAgreement.jobs
exit
Command::Purchaseexit
Sidekiq::Queues.new "default"
Sidekiq::Queue.new "default"
Sidekiq::Queues
Sidekiq::Queue
exit
Zepto.adapter
exit
c
uid
c
uid
n
exit
Zepto.adapter
exit
settlement_account_params
c
page.field
page.text
fill_in("Account Name", with: "Astley Blake")
page.text
exit
n
exit
c
exit
c
exit
SettlementAccount.all
SettlementAccount.count
c
exit
c
exit
n
s
outcome.valid?
exit
params[:id]
exit
params
skip
n
s
n
c
result.valid?
exit
purchase_params
result.errors.full_messages
result.valid?
exit
agreement_id
Agreement.pluck(:id)
c
Agreement.pluck(:id)
Agreement.count
agreement_id
skip
c
exit
Payment.take
Payment.count
payment_id
Payment.find(payment_id)
c
Payment.find(payment_id)
c
Payment.find(payment_id)
Payment.take
Payment.count
payment_id
c
@configured_responses
c
@configured_responses
c
@configured_responses
exit
response.agreement_state
c
response.agreement_state
c
response.agreement_state
c
response.agreement_state
response
should_retry
c
exit
response.agreement_state == :active
response.agreement_state
response.ok?
response
exit
Zepto.instance_variable_get(:@adapter)
 Zepto.instance_variable_set(:@adapter, nil)
 Zepto.instance_variable_set(:@adapter, ninl)
Zepto.instance_variable_get(:@adapter)
Zepto.class_variable_get(:@adapter)
Zepto.class_variable_get(:adapter)
Zepto.methods
Zepto
c
exit
response
exit
JSON.parse(response.body, symbolize_names: true).dig(:data, :state)
JSON.parse(response.body)
JSON.parse(response.body).dig(:state)
JSON.parse(response.body).dig(:data, :state)
c
exit
response.body
exit
response.body
exit
response.status
c
response.body
response
exit
response
exit
response
response.request
response.request.body
response.body
exit
params
exit
client.post("payto/agreements") do |req|
      req.body = params.to_json
    end
params.to_json
params
exit
Zepto::AdapterInterface.instance_method(:create_payment)
Zepto::AdapterInterface.instance_methods(false)
Zepto::AdapterInterface.instance_methods
Zepto::AdapterInterface.methods
Zepto::AdapterInterface.public_methods
Zepto::AdapterInterface.public_methods(false)
exit
Zepto::AdapterInterface.public_methods(false)
Zepto::AdapterInterface.class_methods(false)
Zepto::AdapterInterface.methods(false)
Zepto::AdapterInterface.public_methods(false)
exit
Zepto::TestAdapter.instance_method(:create_payments).parameters
Zepto::TestAdapter.instance_method(:create_payment).parameters
Zepto::TestAdapter.instance_method(:create_payment)
Zepto::TestAdapter.instance-method(:create_payment)
Zepto::TestAdapter.new.method(:create_payment)
Zepto::TestAdapter.method(:create_payment)
Zepto::TestAdapter.instance_methods(false)
Zepto::TestAdapter.methods
Zepto::TestAdapter.class_methods
Zepto::TestAdapter.instance_methods
Zepto::TestAdapter.public_methods(false)
Zepto::TestAdapter.public_methods
Zepto::TestAdapter.instance_methods(false)
Zepto::TestAdapter.instance_methods
Zepto::TestAdapter.methods
Zepto::TestAdapter.methods(false)
Zepto::TestAdapter
exit
agreement
exit
agreement.fetch(:state, :pending)
Zepto::Responses::AgreementStateCheck.new(agreement_state: agreement.fetch(:state, :pending))
exit
agreement_state
exit
response
exit
@state
c
@state
exit
agreement.fetch(:state, :pending)
exit
response.agreement_status
response
c
exit
response
exit
@created_agreements
agreement
agreement[:state] = :pending
agreement
exit
agreement
exit
@created_agreements
agreement
c
exit
@created_agreements.first
c
exit
agreement_attrs
@created_agreements.first
@created_agreements.take
exit
SettlementAccount.all
SettlementAccount.count
SettlementAccount.current
exit
params
c 
page.refresh
page.reload!
page.reload
c
dom_id
self.dom_id
self
exit
Sidekiq::Queues["default"]
exit
Sidekiq::Queues["default"]
Sidekiq::Queues["default]
Sidekiq::Queues
exit
Sidekiq::Job.drain_all
Sidekiq::Job.count
